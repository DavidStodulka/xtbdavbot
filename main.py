import logging
import os
import json
from typing import List, Dict, Any
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import httpx
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import asyncio

# --- LOGGING ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- ENVIRONMENT ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
X_BEARER_TOKEN = os.getenv("X_BEARER_TOKEN")
GNEWS_API_KEY = os.getenv("GNEWS_API_KEY")
CHAT_ID = int(os.getenv("CHAT_ID"))

# --- KL√çƒåOV√Å SLOVA & SLOVN√çK PRO FILTRACI (ROZ≈†√ç≈òEN√ù) ---
KEYWORDS_DICT = {
    # Politika a svƒõtov√≠ l√≠d≈ôi
    "politics": ["Trump", "Biden", "Putin", "Ukraine", "sanctions", "election", "government", "policy", "legislation", "Congress"],
    # Technologie a AI
    "technology": ["AI", "OpenAI", "Tesla", "Elon Musk", "Microsoft", "Apple", "NVIDIA", "AMD", "software", "hardware", "electromobility", "blockchain", "crypto", "Bitcoin", "Ethereum", "Dogecoin", "CBDC"],
    # Trhy a ekonomika
    "markets": ["Nasdaq100", "S&P500", "US30", "inflation", "Federal Reserve", "interest rates", "currency volatility", "forex", "commodities", "gold", "oil"],
    # Bezpeƒçnost a katastrofy
    "security": ["disaster", "earthquake", "terror", "cyberattack", "war", "conflict", "protests"],
    # Dal≈°√≠ kl√≠ƒçov√© fr√°ze s vy≈°≈°√≠m v√Ωznamem
    "high_impact": ["crash", "bubble", "default", "recession", "bankruptcy", "merger", "acquisition", "scandal", "lawsuit"]
}

# --- HISTORIE A DUPLIK√ÅTY ---
sent_tweet_ids = set()
sent_gnews_titles = set()
recent_messages_signatures = set()  # Pro detekci podobn√Ωch zpr√°v

# --- FUNKCE PRO HODNOCEN√ç ZPR√ÅV ---
def score_text(text: str) -> int:
    """
    Boduje text podle p≈ô√≠tomnosti kl√≠ƒçov√Ωch slov ze slovn√≠ku.
    Ka≈æd√© slovo v dan√© kategorii p≈ôid√° urƒçit√Ω poƒçet bod≈Ø.
    Vy≈°≈°√≠ v√°ha pro high_impact kategorie.
    """
    text_lower = text.lower()
    score = 0
    for category, keywords in KEYWORDS_DICT.items():
        for kw in keywords:
            if kw.lower() in text_lower:
                if category == "high_impact":
                    score += 3
                else:
                    score += 1
    return min(score, 10)  # max sk√≥re 10

def create_message_signature(text: str) -> str:
    """
    Jednoduch√Ω hash/signatura pro zji≈°tƒõn√≠ duplicit.
    """
    return str(hash(text.strip().lower()))

# --- Z√çSK√ÅN√ç DAT ---
async def fetch_tweets() -> List[Dict[str, Any]]:
    query = " OR ".join([kw for kws in KEYWORDS_DICT.values() for kw in kws])
    url = "https://api.twitter.com/2/tweets/search/recent"
    headers = {"Authorization": f"Bearer {X_BEARER_TOKEN}"}
    params = {
        "query": f"({query}) lang:en -is:retweet",
        "tweet.fields": "id,text,created_at",
        "max_results": 30
    }
    async with httpx.AsyncClient() as client:
        try:
            resp = await client.get(url, headers=headers, params=params, timeout=10)
            resp.raise_for_status()
            return resp.json().get("data", [])
        except Exception as e:
            logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ tweet≈Ø: {e}")
            return []

async def fetch_gnews() -> List[Dict[str, Any]]:
    url = "https://gnews.io/api/v4/top-headlines"
    params = {
        "token": GNEWS_API_KEY,
        "q": " OR ".join([kw for kws in KEYWORDS_DICT.values() for kw in kws]),
        "lang": "en",
        "max": 10
    }
    async with httpx.AsyncClient() as client:
        try:
            resp = await client.get(url, params=params, timeout=10)
            resp.raise_for_status()
            return resp.json().get("articles", [])
        except Exception as e:
            logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ GNews: {e}")
            return []

# --- V√ùSTUPY PRO U≈ΩIVATELE ---
def format_raw_message(link: str, score: int, influence: str) -> str:
    return (
        f"üü° *Zpr√°va zpracov√°na (Filtr 2.st.)*\n\n"
        f"üì∞ [Zdroj]({link})\n"
        f"üìä Sk√≥re relevance: {score}/10\n"
        f"üìà Mo≈æn√Ω vliv: {influence}\n"
        f"\n#BezGPT #Filtr2"
    )

def format_gpt_message(link: str, gpt_comment: str, score: int, recommendation: str, urgency: bool) -> str:
    urgency_text = "üî• *NEV√ÅHEJ, NASYP TO TAM, VOLE!*" if urgency else ""
    return (
        f"üî¥ *Kritick√° zpr√°va ‚Äì GPT anal√Ωza*\n\n"
        f"üì∞ [Zdroj]({link})\n\n"
        f"üß† GPT koment√°≈ô: {gpt_comment}\n"
        f"üìä Sk√≥re relevance: {score}/10\n"
        f"üìà Doporuƒçen√≠: {recommendation}\n\n"
        f"{urgency_text}\n"
        f"#FiltrGPT"
    )

# --- KOMUNIKACE S GPT ---
def create_gpt_prompt_for_message(text: str) -> List[Dict[str, str]]:
    return [
        {
            "role": "system",
            "content": (
                "Jsi ostr√Ω tr≈æn√≠ analytik. "
                "Na z√°kladƒõ jedin√© zpr√°vy vytvo≈ô konkr√©tn√≠ kr√°tk√Ω koment√°≈ô, "
                "uveƒè p≈ôesn√© sk√≥re relevantnosti 8-10, "
                "a doporuƒç smƒõr investice (komodita, long/short, ƒçasov√Ω horizont). "
                "V√Ωstup mus√≠ b√Ωt struƒçn√Ω, jasn√Ω, bez obecnost√≠."
            )
        },
        {
            "role": "user",
            "content": text
        }
    ]

async def analyze_with_gpt_single(text: str) -> Dict[str, Any]:
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "gpt-4o",
        "messages": create_gpt_prompt_for_message(text),
        "max_tokens": 300,
        "temperature": 0.7
    }
    async with httpx.AsyncClient() as client:
        try:
            resp = await client.post(url, headers=headers, json=body, timeout=20)
            resp.raise_for_status()
            content = resp.json()["choices"][0]["message"]["content"]
            # Oƒçek√°v√°me json strukturu ve form√°tu {"score": int, "comment": str, "recommendation": str}
            try:
                parsed = json.loads(content)
                return parsed
            except json.JSONDecodeError:
                # fallback na text
                return {"comment": content}
        except Exception as e:
            logger.error(f"Chyba GPT API: {e}")
            return {"comment": "Anal√Ωza se nepoda≈ôila naƒç√≠st."}

# --- Hlavn√≠ pracovn√≠ smyƒçka ---
async def job_fetch_and_send(app: Application):
    tweets = await fetch_tweets()
    news = await fetch_gnews()

    # Filtrace nov√Ωch a neodeslan√Ωch tweet≈Ø / zpr√°v
    new_tweets = [t for t in tweets if t["id"] not in sent_tweet_ids]
    new_news = [n for n in news if n["title"] not in sent_gnews_titles]

    if not new_tweets and not new_news:
        logger.info("≈Ω√°dn√© nov√© zpr√°vy.")
        return

    messages_to_send = []

    # Zpracov√°n√≠ tweet≈Ø
    for t in new_tweets:
        text = t["text"]
        score = score_text(text)
        signature = create_message_signature(text)
        if signature in recent_messages_signatures:
            # Duplicitn√≠ zpr√°va, p≈ôeskoƒçit
            continue
        recent_messages_signatures.add(signature)
        sent_tweet_ids.add(t["id"])

        link = f"https://twitter.com/i/web/status/{t['id']}"
        influence = "Trhy, komodity, mƒõny (z√°vis√≠ na obsahu)"  # Zjednodu≈°eno, m≈Ø≈æe se upravit dle t√©matu

        # 2. stupe≈à: sk√≥re 5-7 => odeslat bez GPT
        if 5 <= score <= 7:
            msg = format_raw_message(link, score, influence)
            messages_to_send.append(msg)
            continue

        # Fin√°ln√≠ filtr (8-10) => GPT anal√Ωza
        if score >= 8:
            analysis = await analyze_with_gpt_single(text)
            comment = analysis.get("comment", "≈Ω√°dn√Ω koment√°≈ô.")
            recommendation = analysis.get("recommendation", "Bez doporuƒçen√≠.")
            urgency = score == 10
            msg = format_gpt_message(link, comment, score, recommendation, urgency)
            messages_to_send.append(msg)
            continue

    # Zpracov√°n√≠ zpr√°v GNews
    for n in new_news:
        title = n["title"]
        description = n.get("description", "")
        combined_text = title + " " + description
        score = score_text(combined_text)
        signature = create_message_signature(combined_text)
        if signature in recent_messages_signatures:
            continue
        recent_messages_signatures.add(signature)
        sent_gnews_titles.add(title)

        link = n.get("url", "https://gnews.io/")
        influence = "Trhy, komodity, mƒõny (z√°vis√≠ na obsahu)"

        if 5 <= score <= 7:
            msg = format_raw_message(link, score, influence)
            messages_to_send.append(msg)
            continue

        if score >= 8:
            analysis = await analyze_with_gpt_single(combined_text)
            comment = analysis.get("comment", "≈Ω√°dn√Ω koment√°≈ô.")
            recommendation = analysis
