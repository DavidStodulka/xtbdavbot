import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests
import re
from dotenv import load_dotenv

load_dotenv()

# Nastaven√≠ logov√°n√≠
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Tvoje promƒõnn√© prost≈ôed√≠
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TWITTER_BEARER_TOKEN = os.getenv("TWITTER_BEARER_TOKEN")

# Funkce pro zpracov√°n√≠ p≈ô√≠kaz≈Ø
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Bot je aktivn√≠. Napi≈° /check pro anal√Ωzu.")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    sentiment = analyze_sentiment()
    await update.message.reply_text(f"Aktu√°ln√≠ sentiment: {sentiment}")

# Anal√Ωza sentimentu z Twitteru
def analyze_sentiment() -> str:
    headers = {"Authorization": f"Bearer {TWITTER_BEARER_TOKEN}"}
    url = "https://api.twitter.com/2/tweets/search/recent?query=bitcoin&max_results=10"

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        tweets = response.json().get("data", [])
        text_combined = " ".join(tweet["text"] for tweet in tweets)

        # Zjednodu≈°en√° anal√Ωza: kladn√°/negativn√≠ slova
        positive_words = ["bull", "moon", "pump", "green", "profit"]
        negative_words = ["bear", "crash", "dump", "red", "loss"]

        pos_count = sum(len(re.findall(rf"\b{word}\b", text_combined, re.IGNORECASE)) for word in positive_words)
        neg_count = sum(len(re.findall(rf"\b{word}\b", text_combined, re.IGNORECASE)) for word in negative_words)

        if pos_count > neg_count:
            return "Pozitivn√≠ üìà"
        elif neg_count > pos_count:
            return "Negativn√≠ üìâ"
        else:
            return "Neutr√°ln√≠ üòê"

    except Exception as e:
        logger.error(f"Chyba p≈ôi anal√Ωze: {e}")
        return "Nepoda≈ôilo se naƒç√≠st data ‚ùå"

# Spu≈°tƒõn√≠ bota
def main() -> None:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))

    # Pouze await bez asyncio.run()
    app.run_polling()  # Render s√°m ≈ôe≈°√≠ event loop

if __name__ == "__main__":
    main()
